#!/usr/bin/python3

import argparse
import logging
import socket

# Define constants
MAX_CONNECTIONS = 3

# Configure logging
logging.basicConfig(level=logging.INFO, filename='server.log')

# Create a command-line argument parser
parser = argparse.ArgumentParser(description="Start a server that listens on a specified port")
parser.add_argument("--port", type=int, required=True, help="the port to listen on")

# Parse the command-line arguments
args = parser.parse_args()

# Create a new socket object
serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
serversocket.settimeout(5.0)

# Set the port number
port = args.port

# Bind the socket to the host and port
try:
    serversocket.bind(('', port))
except socket.error as e:
    logging.error("Error binding socket: %s", e)
    exit()

# Listen for incoming connections
serversocket.listen(MAX_CONNECTIONS)
logging.info("Server listening on port %s", port)

# Continuously accept incoming connections
while True:
    try:
        # Accept a new connection
        clientsocket, address = serversocket.accept()
        clientsocket.settimeout(5.0)

        # Print a message indicating the connection was received
        logging.info("Connection received from %s", str(address))

        # Display a message that a connection has been established with the client
        logging.info("Connection established with client at %s:%s", address[0], address[1])

        # Send a message to the client
        try:
            message = "Thank you for connecting to our server\r\n"
            clientsocket.send(message.encode('ascii'))
        except socket.error as e:
            logging.error("Error sending data to client: %s", e)

        # Close the connection
        clientsocket.close()
    except socket.timeout:
        logging.info("Timeout waiting for connections")
    except socket.error as e:
        logging.error("Error accepting connection: %s", e)
